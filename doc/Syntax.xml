<?xml version="1.0" encoding="UTF-8"?>
<ex:Block xmlns:ex="http://elixir.mohiva.com">

	<ex:If expr="{% my.object.var.round(2) == 2.5 %}" />
	<ex:ElseIf expr="{% my.object.var.round(2) == 2.5 %}" />
	<ex:Else />

	<ex:Raw>

	</ex:Raw>

	<!--% An Elixir comment, it should be removed %-->

	<!-- A normal XML comment, it should be preserved -->

	<ex:Set name="var1"><inner /></ex:Set>
	<ex:Set name="var2" value="{% [(3 * index.toNumber()) => 1, 2, (3 * 4 + (1 + 2))] %}" />
	<ex:Set name="var2" value="all scalar values can be passed without an expression" />

	<ex:For var="user" in="{% users %}">
		<ex:Set name="name" value="{% user.name.whenNull('Default value') ?: 'Jon Doe' %}" />

		<!-- Escaping(aka Output Encoding)
		================================================================================================================
		Escaping describes the technique to ensure that characters which come from an unsafe context,
		are treated as safe for inclusion into an Elixir document. While dealing with multiple output
		formats in Elixir, it is possible to define different escaping strategies depending on the
		document context. A list of all bundled strategies can be found under the point: [Escaping Strategies]

		The next section gives you an overview about the different ways on how escaping works in an Elixir document.
		In this section we talk about safe and unsafe values. For a description about this type of values, please look
		into the [appropriate section].

		Global escaping(aka Automatic escaping):
		================
		If enabled, all values which are not safe be default are escaped with the defined escaping strategy.
		If no global escaping strategy is set then it uses the RAW strategy by default.

		Block escaping
		==============
		With this method it is possible to enable escaping for a section of a document.
		-->
		<ex:Escape strategy="html">
			Escapes all unsafe values in this block using the HTML strategy
		</ex:Escape>

		<!--
		Expression escaping
		===================
		With this method you can escape the complete content of an expression.
		-->
		{%:html 'Escapes all unsafe values in this expression using the HTML strategy' %}

		<!--
		Value escaping
		==============
		As the title says, with this method you can escape only a single value in an expression.
		-->
		{% 'Escapes only this value using the HTML strategy':html %}
		<!--
		Different strategies can also be mixed inside an expression.
		-->
		{% 'Escapes using the HTML strategy':html _ 'Escapes using the JS strategy':js %}

		<!--
		Escaping rules
		==============
		Needless to say, it is possible to mix all of these different methods. For such scenario their exist
		the following simple rule: The inner overwrites the outer strategy.
		-->
		<ex:Escape strategy="html"> <!-- Overwrites the global rule -->
			{%:html name %}     <!-- Escaped as html -->
			{%:xml tag %}       <!-- Escaped as xml -->
			{% name %}          <!-- Escaped as html -->
			{%:raw name %}      <!-- Not escaped, because it is marked as safe -->
			{%:raw name:js %}   <!-- Escape as js -->
		</ex:Escape>

		<!--
		Escaping strategies
		===================
		The following escaping strategies are bundled with elixir:
		raw: Treats the values as it is
		html: Makes the value HTML save
		xml: Makes the value XML save
		-->

		<!--
		Safe values
		===========
		- All values which are defined directly in the document are automatically save and they will never be
		  escaped automatically. This doesn't mean that it isn't possible to escape such values. If you define
		  a escaping strategy for a safe value, it is also possible to escape it. See the section [Escaping save values]
		  fore more details.
		-->
		{% 'Lucky Luke' %}
		{%
			name = 'Lucky Luke'
			name.toLower()
		%}

		<!--
		- All number values, regardless if it's defined in the document or it comes from user input.
		-->
		{% 1 %}
		{% 1.1 %}
		{% val %} <!-- If val is a numeric value -->

		<!--
		- All boolean values, regardless if it's defined in the document or it comes from user input.
		-->
		{% true %}
		{% false %}
		{% val %} <!-- If val is a boolean value -->

		<!--
		- All null values, regardless if it's defined in the document or it comes from user input.
		-->
		{% null %}
		{% val %} <!-- If val is a null value -->

		<!--
		- Blocks which are marked as raw
		-->
		<ex:Escape strategy="raw">
			{% name %}
		</ex:Escape>

		<!--
		- Expressions which are marked as raw
		-->
		{%:raw name %}

		<!--
		- Values which are marked as raw
		-->
		{% name:raw _ ' is crazy' %}

		<!--
		Unsafe values:
		==============
		- All values which comes from outside the document and which are not safe by default.
		-->
		{% name %}

		<!--
		Escaping save values
		====================
		For the sake of consistency it is possible to escape a value which is safe by default. But this works only
		for manually escaping. Auto escaping doesn't work for safe values by design.

		Escapes a save value inside a block:
		-->
		<ex:Escape strategy="html">
			{% 'Lucky Luke' %}
		</ex:Escape>

		<!--
		Escapes save values inside an expression:
		-->
		{%:html 'Lucky Luke' _ ' is crazy' %}

		<!--
		Escapes a save value inside an expression:
		-->
		{% 'Lucky Luke':html %}

		<!-- Document Escaping
		================================================================================================================
		Sometimes it is necessary to tell Elixir that it should ignore parts which would otherwise be handled as Elixir
		syntax. For example if you will try to output an expression block, you can use single or double quotes to escape
		this syntax.
		-->
		{% '{% 'Lucky Luke' %}' %}
		{% "{% 'Lucky Luke' %}" %}

		<!--
		For bigger sections or to escape helper methods, you can use the `raw` element helper.
		-->
		<ex:Raw>
			<ex:Foreach key="k" value="v" in="{% users %}">
				{% k %} {% v %}
			</ex:Foreach>
		</ex:Raw>

		<!-- Strict mode
		================================================================================================================
		If the strict mode is enabled, the engine behaves as follows:
		- Prints the string null for null values
		- Throws an exception if try to access a null value
		- Dumps arrays or objects if try to output an array or an object
		- Throws exceptions on errors

		If the strict mode is disabled, the engine behaves as follows:
		- Prints an empty string for null values
		- Prints an empty string if try to access a null value
		- Prints an empty string if try to output an array or an object
		- Prints an empty string if an exception was caught
		-->

		<!-- Type casting for expression values
		=======================================
		Expression values can be casted to other types. The following table shows the implemented casting rules.

		- object -> object, array
		- array -> object, array
		- string -> string, number, boolean
		- number -> string, number, boolean
		- boolean -> string, number, boolean

		When casting a string to a number then this works only if the string is a numeric value. Otherwise
		an InvalidCastException will be thrown.

		If you try to cast a type to a not supported type then an InvalidCastException will be thrown.
		-->

		<!-- Values are always returned as new object -->
		{%
			name = 'Lucky Luke'
			toLower = name.toLower() <!-- toLower: lucky luke -->
			toUpper = name.toUpper() <!-- toUpper: LUCKY LUKE -->
			default = name           <!-- default: Lucky Luke -->
		%}

		{%
			name = user.name[index].split(' ').whenEmpty('Default value'.toLower())
				? 'Lucky Luke'
				: 'Jon' _ 'Doe'.toLower()
		%}

		$this->setVar('name', (new ObjectValue($this->getVar('user')))
			->getByProperty('name')
			->getByKey($this->getVar('index'))
			->split(' ')
			->whenEmpty((new StringValue('Default value'))->toLower())
			->toString() ?:  'Jon' . (new StringValue('Doe'))->toLower()
		);

		A raw '{% index %}'

		{% 'test {% index %} test' %}
		{% odd %}
		{% even %}
		{% first %}
		{% last %}

		You have {% numbers %} pieces of shit

	</ex:For>

	<ex:Foreach key="k" value="v" in="{% users %}">
		{% k %} {% v %}
	</ex:Foreach>

	<ex:Foreach in="{% users %}">
		{% key %} {% value %}
	</ex:Foreach>

</ex:Block>

<!--

Variables
=============
my
my.object
my.object.round(2)
my.object.round(2).isNotNull()
my.object.arrayVar.merge(my.object.otherArrayVar.keys())

Constants
==============
Global::CONSTANT
Class::CONSTANT
namespace.Class::CONSTANT.split('/')

Values
==============
1234
0.1234
-0.1234
+0.1234
true
false
null
[1, 2, 3 => 5]
{key: 'value'}
"a string"

Helpers(ExpressionHelper)
===============
mx:Date()

Operators
===============

unary
=====
! NOT (prefix notation)
- NEGATIVE (prefix notation)
+ POSITIVE (prefix notation)

binary
======
_  CONCAT
=  ASSIGN
== EQUAL
!= NOT_EQUAL
<  LESS
<= LESS_EQUAL
>  GREATER
>= GREATER_EQUAL
+  ADDITION
-  SUBTRACTION
/  DIVISION
*  MULTIPLICATION
%  MODULO
^  POWER
|| OR
&& AND

Every value is passed to an value object(autoboxing). this object contains methods like isNull(),
toNumber(), toArray(), toObject(), toString(), toBool(), ... by default. Values are passed
to specific objects by the type of the value:
array  => ArrayValue
object => ObjectValue
int, float => NumberValue
string => StringValue
boolean => BooleanValue
null => NullValue

Autoboxing:
(1+1).round()
[1, 2, 3].slice()
1.1.toString()
1.toString()
{% 1 + 1.round(1 + 1.round(5:raw, 2)):raw + [1].toNumber() %}

Every object has specific methods to work with the value:
ArrayValue: join, merge, length, sort, keys, values, contains
StringValue: split, replace, upper, lower, reverse, length
NumberValue: format

It should be possible to register own value classes so that users can register its own implementations:
class CustomArrayValue extends ArrayValue {

}

class CustomValueFactory implements ValueFactory {

    public function createArrayValue($value) {

        return new CustomArrayValue($value);
    }
}

$config = new Config();
$config->setValueFactory(new CustomValueFactory());

-->

